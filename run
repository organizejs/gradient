#!/bin/bash

# VARS
# ============================================
DB_USER=gradient_user
DEV_DB=gradient_dev
TEST_DB=gradient_test
DEFAULT_PW=password


# FUNCS
# ============================================
# drop the databases
function db_drop {
    if [[ ! "$OSTYPE" =~ ^darwin ]]
    then
        # On Ubuntu, need to run these commands as the postgres user.
        PREFIX='sudo -u postgres'
    fi
    for DB_NAME in $DEV_DB $TEST_DB
    do
        if [[ `$PREFIX psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'"` == 1 ]]
        then
            echo -e "Dropping database $(tput setaf 3)$DB_NAME$(tput sgr0)..."
            $PREFIX dropdb $DB_NAME
        else
            echo -e "Database $(tput setaf 3)$DB_NAME$(tput sgr0) doesn't exist, moving on..."
        fi
    done
}

# create the databases
function db_create {
    if [[ ! "$OSTYPE" =~ ^darwin ]]
    then
        # On Ubuntu, need to run these commands as the postgres user.
        PREFIX='sudo -u postgres'
    fi

    # Create user if it doesn't exist.
    user_exists=`$PREFIX psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'"`
    if [[ $user_exists != 1 ]]
    then
        echo -e "Creating database user $(tput setaf 3)$DB_USER$(tput sgr0)..."
        $PREFIX psql postgres -c "CREATE USER $DB_USER PASSWORD '$DEFAULT_PW' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;"
    else
        echo -e "Database user $(tput setaf 3)$DB_USER$(tput sgr0) already exists, moving on..."
    fi

    # Create databases if they don't exist.
    for DB_NAME in $DEV_DB $TEST_DB
    do
        if [[ `$PREFIX psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'"` != 1 ]]
        then
            echo -e "Creating database $(tput setaf 3)$DB_NAME$(tput sgr0)..."
            $PREFIX createdb -U postgres -E utf8 -O $DB_USER $DB_NAME -T template0
        else
            echo -e "Database $(tput setaf 3)$DB_NAME$(tput sgr0) already exists, moving on..."
        fi
    done
}



# CMDS
# ============================================
if [ -z $1 ]
then
    echo -e "$(tput setaf 3)Tell me what to do...$(tput sgr0)"

elif [ $1 == 'db:create' ]
then
    db_create
    FLASK_APP=application.py flask db init

elif [ $1 == 'db:drop' ]
then
    db_drop

elif [ $1 == 'db:reset' ]
then
    # reset the database:
    # - drop & create the dbs
    # - create initial migrations if necessary
    # - stamp database to latest migration
    db_drop
    db_create
    if [ ! -d 'migrations' ]; then
        FLASK_APP=application.py flask db init
    fi
    FLASK_APP=application.py flask db stamp

elif [ $1 == 'db:migrate' ]
then
    # generates a migration (but does not apply it)
    # run `flask db upgrade` to apply migrations
    FLASK_APP=application.py flask db migrate

elif [ $1 == 'db:upgrade' ]
then
    # applies a migration
    FLASK_APP=application.py flask db upgrade

fi
